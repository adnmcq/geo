"""
Django settings for quiz project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

import configparser



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = configparser.ConfigParser()
config.read(os.path.join(BASE_DIR,'conf.ini'))
MAPBOX_ACCESS_TOKEN = config['TOKENS']['mapbox'] if not os.environ.get('MAPBOX_ACCESS_TOKEN') else os.environ.get('MAPBOX_ACCESS_TOKEN')
PARTICLE_ACCESS_TOKEN = config['TOKENS']['particle'] if not os.environ.get('PARTICLE_ACCESS_TOKEN') else os.environ.get('PARTICLE_ACCESS_TOKEN')
MAPBOX_NO_LIMIT_ACCESS_TOKEN = config['TOKENS']['mapboxnolimit'] if not os.environ.get('MAPBOX_NO_LIMIT_ACCESS_TOKEN') else os.environ.get('MAPBOX_NO_LIMIT_ACCESS_TOKEN')
GOOGLE_MAPS = config['TOKENS']['googlemaps'] if not os.environ.get('GOOGLE_MAPS') else os.environ.get('GOOGLE_MAPS')
SECRET_KEY = config['TOKENS']['django_secret'] if not os.environ.get('DJANGO_SECRET') else os.environ.get('DJANGO_SECRET')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = '*bgt*o2$+8l=8q8!^tqkgd+r%@$2a6a@exat$v)bh0qryfm)$9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'geo.apps.GeoConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quiz.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quiz.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


db, dbu, dbp = 'akgeo', 'pets', 'petshcu1234'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db,
        'USER': dbu,
        'PASSWORD': dbp,
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
'''
1. Make sure that django.contrib.staticfiles is included in your INSTALLED_APPS.

2. In your settings file, define STATIC_URL, for example:
'''
STATIC_URL = '/static/'
'''
3. In your templates, use the static template tag to build the URL for the given relative path using the configured STATICFILES_STORAGE.
ex:
{% load static %}
<img src="{% static "my_app/example.jpg" %}" alt="My image">


4. Store your static files in a folder called static in your app. For example my_app/static/my_app/example.jpg.
(you can store them not in app as well, see next step..)

5. Your project will probably also have static assets that arenâ€™t tied to a particular app. In addition to using a 
static/ directory inside your apps, you can define a list of directories (STATICFILES_DIRS) 
in your settings file where Django will also look for static files. For example:
'''

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

MEDIA_ROOT  = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL  = '/'

#https://devcenter.heroku.com/articles/deploying-python
#https://github.com/heroku/django-heroku
# Configure Django App for Heroku.
import django_heroku
django_heroku.settings(locals(), logging=False)  #https://stackoverflow.com/questions/18920428/django-logging-on-heroku

DATA_UPLOAD_MAX_MEMORY_SIZE=None #My calculate route functions are just too big